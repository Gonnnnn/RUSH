// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.26.1
// source: rush.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Rush_SignIn_FullMethodName                = "/rush.proto.Rush/SignIn"
	Rush_Auth_FullMethodName                  = "/rush.proto.Rush/Auth"
	Rush_ListUsers_FullMethodName             = "/rush.proto.Rush/ListUsers"
	Rush_GetUser_FullMethodName               = "/rush.proto.Rush/GetUser"
	Rush_AddUser_FullMethodName               = "/rush.proto.Rush/AddUser"
	Rush_ListSessions_FullMethodName          = "/rush.proto.Rush/ListSessions"
	Rush_GetSession_FullMethodName            = "/rush.proto.Rush/GetSession"
	Rush_AddSession_FullMethodName            = "/rush.proto.Rush/AddSession"
	Rush_CreateAttendanceForm_FullMethodName  = "/rush.proto.Rush/CreateAttendanceForm"
	Rush_ApplyAttendance_FullMethodName       = "/rush.proto.Rush/ApplyAttendance"
	Rush_GetAttendanceForUser_FullMethodName  = "/rush.proto.Rush/GetAttendanceForUser"
	Rush_GetHalfYearAttendance_FullMethodName = "/rush.proto.Rush/GetHalfYearAttendance"
)

// RushClient is the client API for Rush service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RushClient interface {
	// Sign in with an OpenID Connect token.
	SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error)
	Auth(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AuthResponse, error)
	// User management
	// List all users by pagination. Admins only.
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error)
	AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*User, error)
	// Session management
	ListSessions(ctx context.Context, in *ListSessionsRequest, opts ...grpc.CallOption) (*ListSessionsResponse, error)
	GetSession(ctx context.Context, in *GetSessionRequest, opts ...grpc.CallOption) (*Session, error)
	AddSession(ctx context.Context, in *AddSessionRequest, opts ...grpc.CallOption) (*Session, error)
	CreateAttendanceForm(ctx context.Context, in *CreateAttendanceFormRequest, opts ...grpc.CallOption) (*CreateAttendanceFormResponse, error)
	// Apply attendance for a session. Admins only. Once the attendance is applied,
	// the session is closed and the data about session can not be changed.
	ApplyAttendance(ctx context.Context, in *ApplyAttendanceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Attendance management
	GetAttendanceForUser(ctx context.Context, in *GetAttendanceForUserRequest, opts ...grpc.CallOption) (*GetAttendanceForUserResponse, error)
	GetHalfYearAttendance(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetHalfYearAttendanceResponse, error)
}

type rushClient struct {
	cc grpc.ClientConnInterface
}

func NewRushClient(cc grpc.ClientConnInterface) RushClient {
	return &rushClient{cc}
}

func (c *rushClient) SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignInResponse)
	err := c.cc.Invoke(ctx, Rush_SignIn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rushClient) Auth(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AuthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, Rush_Auth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rushClient) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUsersResponse)
	err := c.cc.Invoke(ctx, Rush_ListUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rushClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, Rush_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rushClient) AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, Rush_AddUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rushClient) ListSessions(ctx context.Context, in *ListSessionsRequest, opts ...grpc.CallOption) (*ListSessionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSessionsResponse)
	err := c.cc.Invoke(ctx, Rush_ListSessions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rushClient) GetSession(ctx context.Context, in *GetSessionRequest, opts ...grpc.CallOption) (*Session, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Session)
	err := c.cc.Invoke(ctx, Rush_GetSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rushClient) AddSession(ctx context.Context, in *AddSessionRequest, opts ...grpc.CallOption) (*Session, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Session)
	err := c.cc.Invoke(ctx, Rush_AddSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rushClient) CreateAttendanceForm(ctx context.Context, in *CreateAttendanceFormRequest, opts ...grpc.CallOption) (*CreateAttendanceFormResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAttendanceFormResponse)
	err := c.cc.Invoke(ctx, Rush_CreateAttendanceForm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rushClient) ApplyAttendance(ctx context.Context, in *ApplyAttendanceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Rush_ApplyAttendance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rushClient) GetAttendanceForUser(ctx context.Context, in *GetAttendanceForUserRequest, opts ...grpc.CallOption) (*GetAttendanceForUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAttendanceForUserResponse)
	err := c.cc.Invoke(ctx, Rush_GetAttendanceForUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rushClient) GetHalfYearAttendance(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetHalfYearAttendanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHalfYearAttendanceResponse)
	err := c.cc.Invoke(ctx, Rush_GetHalfYearAttendance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RushServer is the server API for Rush service.
// All implementations must embed UnimplementedRushServer
// for forward compatibility
type RushServer interface {
	// Sign in with an OpenID Connect token.
	SignIn(context.Context, *SignInRequest) (*SignInResponse, error)
	Auth(context.Context, *emptypb.Empty) (*AuthResponse, error)
	// User management
	// List all users by pagination. Admins only.
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
	GetUser(context.Context, *GetUserRequest) (*User, error)
	AddUser(context.Context, *AddUserRequest) (*User, error)
	// Session management
	ListSessions(context.Context, *ListSessionsRequest) (*ListSessionsResponse, error)
	GetSession(context.Context, *GetSessionRequest) (*Session, error)
	AddSession(context.Context, *AddSessionRequest) (*Session, error)
	CreateAttendanceForm(context.Context, *CreateAttendanceFormRequest) (*CreateAttendanceFormResponse, error)
	// Apply attendance for a session. Admins only. Once the attendance is applied,
	// the session is closed and the data about session can not be changed.
	ApplyAttendance(context.Context, *ApplyAttendanceRequest) (*emptypb.Empty, error)
	// Attendance management
	GetAttendanceForUser(context.Context, *GetAttendanceForUserRequest) (*GetAttendanceForUserResponse, error)
	GetHalfYearAttendance(context.Context, *emptypb.Empty) (*GetHalfYearAttendanceResponse, error)
	mustEmbedUnimplementedRushServer()
}

// UnimplementedRushServer must be embedded to have forward compatible implementations.
type UnimplementedRushServer struct {
}

func (UnimplementedRushServer) SignIn(context.Context, *SignInRequest) (*SignInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignIn not implemented")
}
func (UnimplementedRushServer) Auth(context.Context, *emptypb.Empty) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Auth not implemented")
}
func (UnimplementedRushServer) ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedRushServer) GetUser(context.Context, *GetUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedRushServer) AddUser(context.Context, *AddUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedRushServer) ListSessions(context.Context, *ListSessionsRequest) (*ListSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSessions not implemented")
}
func (UnimplementedRushServer) GetSession(context.Context, *GetSessionRequest) (*Session, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSession not implemented")
}
func (UnimplementedRushServer) AddSession(context.Context, *AddSessionRequest) (*Session, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSession not implemented")
}
func (UnimplementedRushServer) CreateAttendanceForm(context.Context, *CreateAttendanceFormRequest) (*CreateAttendanceFormResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAttendanceForm not implemented")
}
func (UnimplementedRushServer) ApplyAttendance(context.Context, *ApplyAttendanceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyAttendance not implemented")
}
func (UnimplementedRushServer) GetAttendanceForUser(context.Context, *GetAttendanceForUserRequest) (*GetAttendanceForUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttendanceForUser not implemented")
}
func (UnimplementedRushServer) GetHalfYearAttendance(context.Context, *emptypb.Empty) (*GetHalfYearAttendanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHalfYearAttendance not implemented")
}
func (UnimplementedRushServer) mustEmbedUnimplementedRushServer() {}

// UnsafeRushServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RushServer will
// result in compilation errors.
type UnsafeRushServer interface {
	mustEmbedUnimplementedRushServer()
}

func RegisterRushServer(s grpc.ServiceRegistrar, srv RushServer) {
	s.RegisterService(&Rush_ServiceDesc, srv)
}

func _Rush_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RushServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rush_SignIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RushServer).SignIn(ctx, req.(*SignInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rush_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RushServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rush_Auth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RushServer).Auth(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rush_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RushServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rush_ListUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RushServer).ListUsers(ctx, req.(*ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rush_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RushServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rush_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RushServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rush_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RushServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rush_AddUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RushServer).AddUser(ctx, req.(*AddUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rush_ListSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RushServer).ListSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rush_ListSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RushServer).ListSessions(ctx, req.(*ListSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rush_GetSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RushServer).GetSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rush_GetSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RushServer).GetSession(ctx, req.(*GetSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rush_AddSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RushServer).AddSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rush_AddSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RushServer).AddSession(ctx, req.(*AddSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rush_CreateAttendanceForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAttendanceFormRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RushServer).CreateAttendanceForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rush_CreateAttendanceForm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RushServer).CreateAttendanceForm(ctx, req.(*CreateAttendanceFormRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rush_ApplyAttendance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyAttendanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RushServer).ApplyAttendance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rush_ApplyAttendance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RushServer).ApplyAttendance(ctx, req.(*ApplyAttendanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rush_GetAttendanceForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttendanceForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RushServer).GetAttendanceForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rush_GetAttendanceForUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RushServer).GetAttendanceForUser(ctx, req.(*GetAttendanceForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rush_GetHalfYearAttendance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RushServer).GetHalfYearAttendance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rush_GetHalfYearAttendance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RushServer).GetHalfYearAttendance(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Rush_ServiceDesc is the grpc.ServiceDesc for Rush service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Rush_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rush.proto.Rush",
	HandlerType: (*RushServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignIn",
			Handler:    _Rush_SignIn_Handler,
		},
		{
			MethodName: "Auth",
			Handler:    _Rush_Auth_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _Rush_ListUsers_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Rush_GetUser_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _Rush_AddUser_Handler,
		},
		{
			MethodName: "ListSessions",
			Handler:    _Rush_ListSessions_Handler,
		},
		{
			MethodName: "GetSession",
			Handler:    _Rush_GetSession_Handler,
		},
		{
			MethodName: "AddSession",
			Handler:    _Rush_AddSession_Handler,
		},
		{
			MethodName: "CreateAttendanceForm",
			Handler:    _Rush_CreateAttendanceForm_Handler,
		},
		{
			MethodName: "ApplyAttendance",
			Handler:    _Rush_ApplyAttendance_Handler,
		},
		{
			MethodName: "GetAttendanceForUser",
			Handler:    _Rush_GetAttendanceForUser_Handler,
		},
		{
			MethodName: "GetHalfYearAttendance",
			Handler:    _Rush_GetHalfYearAttendance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rush.proto",
}
