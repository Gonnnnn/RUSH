// Code generated by MockGen. DO NOT EDIT.
// Source: add.go
//
// Generated by this command:
//
//	mockgen -source=add.go -destination=add_mock.go -package=user
//

// Package user is a generated GoMock package.
package user

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUserRepo is a mock of UserRepo interface.
type MockUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoMockRecorder
}

// MockUserRepoMockRecorder is the mock recorder for MockUserRepo.
type MockUserRepoMockRecorder struct {
	mock *MockUserRepo
}

// NewMockUserRepo creates a new mock instance.
func NewMockUserRepo(ctrl *gomock.Controller) *MockUserRepo {
	mock := &MockUserRepo{ctrl: ctrl}
	mock.recorder = &MockUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepo) EXPECT() *MockUserRepoMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockUserRepo) Add(u User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", u)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockUserRepoMockRecorder) Add(u any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockUserRepo)(nil).Add), u)
}

// CountByName mocks base method.
func (m *MockUserRepo) CountByName(name string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountByName", name)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountByName indicates an expected call of CountByName.
func (mr *MockUserRepoMockRecorder) CountByName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountByName", reflect.TypeOf((*MockUserRepo)(nil).CountByName), name)
}
