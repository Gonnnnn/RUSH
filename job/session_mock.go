// Code generated by MockGen. DO NOT EDIT.
// Source: session.go
//
// Generated by this command:
//
//	mockgen -source=session.go -destination=session_mock.go -package=job
//

// Package job is a generated GoMock package.
package job

import (
	reflect "reflect"
	session "rush/session"

	gomock "go.uber.org/mock/gomock"
)

// MocksessionCloser is a mock of sessionCloser interface.
type MocksessionCloser struct {
	ctrl     *gomock.Controller
	recorder *MocksessionCloserMockRecorder
}

// MocksessionCloserMockRecorder is the mock recorder for MocksessionCloser.
type MocksessionCloserMockRecorder struct {
	mock *MocksessionCloser
}

// NewMocksessionCloser creates a new mock instance.
func NewMocksessionCloser(ctrl *gomock.Controller) *MocksessionCloser {
	mock := &MocksessionCloser{ctrl: ctrl}
	mock.recorder = &MocksessionCloserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocksessionCloser) EXPECT() *MocksessionCloserMockRecorder {
	return m.recorder
}

// CloseSession mocks base method.
func (m *MocksessionCloser) CloseSession(sessionId, callerId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSession", sessionId, callerId)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSession indicates an expected call of CloseSession.
func (mr *MocksessionCloserMockRecorder) CloseSession(sessionId, callerId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSession", reflect.TypeOf((*MocksessionCloser)(nil).CloseSession), sessionId, callerId)
}

// MocksessionGetter is a mock of sessionGetter interface.
type MocksessionGetter struct {
	ctrl     *gomock.Controller
	recorder *MocksessionGetterMockRecorder
}

// MocksessionGetterMockRecorder is the mock recorder for MocksessionGetter.
type MocksessionGetterMockRecorder struct {
	mock *MocksessionGetter
}

// NewMocksessionGetter creates a new mock instance.
func NewMocksessionGetter(ctrl *gomock.Controller) *MocksessionGetter {
	mock := &MocksessionGetter{ctrl: ctrl}
	mock.recorder = &MocksessionGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocksessionGetter) EXPECT() *MocksessionGetterMockRecorder {
	return m.recorder
}

// GetOpenSessionsWithForm mocks base method.
func (m *MocksessionGetter) GetOpenSessionsWithForm() ([]session.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpenSessionsWithForm")
	ret0, _ := ret[0].([]session.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOpenSessionsWithForm indicates an expected call of GetOpenSessionsWithForm.
func (mr *MocksessionGetterMockRecorder) GetOpenSessionsWithForm() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenSessionsWithForm", reflect.TypeOf((*MocksessionGetter)(nil).GetOpenSessionsWithForm))
}

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Errorw mocks base method.
func (m *MockLogger) Errorw(msg string, keysAndValues ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range keysAndValues {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Errorw", varargs...)
}

// Errorw indicates an expected call of Errorw.
func (mr *MockLoggerMockRecorder) Errorw(msg any, keysAndValues ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, keysAndValues...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errorw", reflect.TypeOf((*MockLogger)(nil).Errorw), varargs...)
}

// Infow mocks base method.
func (m *MockLogger) Infow(msg string, keysAndValues ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range keysAndValues {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Infow", varargs...)
}

// Infow indicates an expected call of Infow.
func (mr *MockLoggerMockRecorder) Infow(msg any, keysAndValues ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, keysAndValues...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Infow", reflect.TypeOf((*MockLogger)(nil).Infow), varargs...)
}
