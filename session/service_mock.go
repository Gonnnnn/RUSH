// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=service_mock.go -package=session
//

// Package session is a generated GoMock package.
package session

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSessionRepo is a mock of SessionRepo interface.
type MockSessionRepo struct {
	ctrl     *gomock.Controller
	recorder *MockSessionRepoMockRecorder
}

// MockSessionRepoMockRecorder is the mock recorder for MockSessionRepo.
type MockSessionRepoMockRecorder struct {
	mock *MockSessionRepo
}

// NewMockSessionRepo creates a new mock instance.
func NewMockSessionRepo(ctrl *gomock.Controller) *MockSessionRepo {
	mock := &MockSessionRepo{ctrl: ctrl}
	mock.recorder = &MockSessionRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionRepo) EXPECT() *MockSessionRepoMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockSessionRepo) Delete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSessionRepoMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSessionRepo)(nil).Delete), id)
}

// Get mocks base method.
func (m *MockSessionRepo) Get(id string) (Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSessionRepoMockRecorder) Get(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSessionRepo)(nil).Get), id)
}

// Update mocks base method.
func (m *MockSessionRepo) Update(id string, updateForm UpdateForm) (Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, updateForm)
	ret0, _ := ret[0].(Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockSessionRepoMockRecorder) Update(id, updateForm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSessionRepo)(nil).Update), id, updateForm)
}
